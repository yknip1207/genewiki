<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project name="jwbf" default="releaseWithoutTest" basedir=".">
	<description>build and deploy jwbf</description>

	<!-- alter this for a new release -->
	<property name="version.release" value="1.2" />

	<property name="temp.dir" location="${basedir}/temp" />
	<property name="junit.dir" location="${temp.dir}/junit" />

	<property name="classes.dir" location="${temp.dir}/classes" description="Directory to compile to." />
	<property name="classes.test.dir" location="${temp.dir}/classes_test" description="Directory to compile the test classes to." />
	<property name="lib.dir" location="${basedir}/lib" description="Directory with the libraries used by this project." />
	<property name="build.dir" value="build" description="Directory to put the distribution packages to." />

	<path id="classpath">
		<fileset dir="${lib.dir}" includes="*.jar" />
	</path>

	<path id="classpath.test">
		<pathelement location="${lib.dir}/junit-4.3.1.jar" />
		<fileset dir="${lib.dir}" includes="*.jar" />
	</path>

	<target name="init">
		<tstamp />
		<delete dir="${classes.dir}" failonerror="false" />
		<mkdir dir="${classes.dir}" />
	</target>

	<target name="init_test" depends="init">
		<delete failonerror="false" dir="${classes.test.dir}" />
		<mkdir dir="${classes.test.dir}" />
		<delete failonerror="false" dir="${junit.dir}" />
		<mkdir dir="${junit.dir}" />
	</target>

	<!-- to build a regular release the svn tool: "svnversion" is required
	   - for ant script. You can get if from
	   - http://subversion.tigris.org/getting.html -->
	<target name="version" description="Sets the buildversion for the current build">
		<exec executable="svnversion" outputproperty="version.svn" failifexecutionfails="no">
			<arg line="-n -c" />
			<redirector>
				<outputfilterchain>
					<tokenfilter>
						<replaceregex pattern="^([0-9]*:)?" replace="" flags="g" />
					</tokenfilter>
					<tokenfilter>
						<replaceregex pattern="[MS].*$" replace="" flags="g" />
					</tokenfilter>
				</outputfilterchain>
			</redirector>
		</exec>
		<echo>Found svn version: ${version.svn}</echo>
		<condition property="build.number" value="${version.release}-${version.svn}" else="${version.release}-unknownBuild">
			<matches string="${version.svn}" pattern="^[1-9]" />
		</condition>
		<echo>Build number is: ${build.number}</echo>
	</target>

	<target name="compile" depends="init" description="--> compile the sources">
		<javac classpathref="classpath" source="1.5" target="1.5" destdir="${classes.dir}" >
			<src path="src" /> <src path="test" />
			</javac>
		<copy todir="${classes.dir}">
			<fileset dir="src">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="compile_test" depends="compile, init_test">
		<javac destdir="${classes.test.dir}" srcdir="test" encoding="UTF-8">
			<classpath>
				<path refid="classpath" />
				<pathelement location="${classes.dir}" />
			</classpath>
		</javac>
		<copy todir="${classes.test.dir}">
			<fileset dir="test">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="test" depends="compile_test" description="--> Runs all Unit-Tests">
		<junit printsummary="yes" haltonfailure="no" haltonerror="no" failureproperty="junit.failure" errorproperty="junit.error" fork="yes">
			<formatter type="plain" usefile="true" />
			<formatter type="xml" />
			<batchtest todir="${temp.dir}/junit">
				<fileset dir="test">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
			<classpath>
				<path refid="classpath.test" />
				<pathelement location="${classes.dir}" />
				<pathelement location="${classes.test.dir}" />
			</classpath>
		</junit>
		<mkdir dir="${build.dir}/junit" />
		<echo>${junit.dir}</echo>
		<copy todir="${build.dir}/junit">
			<fileset dir="${junit.dir}">
				<include name="TEST-*.xml" />
			</fileset>
		</copy>
		<junitreport todir="${build.dir}/junit">
			<fileset dir="${junit.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${junit.dir}" />
		</junitreport>
		<copy todir="${build.dir}/junit">
			<fileset dir="${junit.dir}">
				<include name="**/*.html" />
				<include name="**/*.css" />
			</fileset>
		</copy>
		<fail message="junit errors" if="junit.error" />
		<fail message="junit failures" if="junit.failure" />
	</target>

	<target name="jar" depends="compile, version, clean" description="--> build jar">
		<echo message="Building: jwbf-${build.number}.jar" />
		<mkdir dir="${build.dir}" />
		<jar destfile="${build.dir}/jwbf-${build.number}.jar">
			<fileset dir="${classes.dir}" excludes="**/Test.class, **/*.htm*" />
			<fileset dir="buildAdds" includes="*" />
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Implementation-Version" value="${build.number}" />
			</manifest>
		</jar>
	</target>

	<target name="release" depends="jar" description="--> create release">
		<antcall target="test" />
		<antcall target="releaseWithSrc" />
		<antcall target="releaseBin" />
		<antcall target="releaseSimpleJar" />
		<copy todir="${build.dir}/">
			<fileset dir="." includes="*.sh" />
		</copy>
	</target>

	<target name="releaseWithoutTest" depends="jar" description="--> create release without test">
		<echo>Deprecated: download maven and use this to build</echo>
		<!--<antcall target="releaseWithSrc" />
		<antcall target="releaseBin" />
		<antcall target="releaseSimpleJar" /> -->
	</target>

	<target name="releaseWithSrc">
		<property name="release" value="${build.dir}/release_${build.number}" />
		<echo message="Release SRC: ${build.number}" />
		<mkdir dir="${release}" />
		<copy file="${build.dir}/jwbf-${build.number}.jar" todir="${release}/bin" />
		<copy todir="${release}/src">
			<fileset dir="src" includes="**/*" />
		</copy>
		<copy todir="${release}/test">
			<fileset dir="test" includes="**/*" />
		</copy>
		<copy todir="${release}/lib">
			<fileset dir="${lib.dir}" includes="**/*" />
		</copy>
		<copy todir="${release}">
			<fileset dir="buildAdds" includes="*" />
		</copy>
		<tar tarfile="${release}/jwbf-${build.number}-src.tar.gz" basedir="${release}" compression="gzip" excludes="*.tar.gz" />
		<delete includeemptydirs="true">
			<fileset dir="${release}" includes="*/**" excludes="*.tar.gz, junit" />
		</delete>
	</target>

	<target name="releaseBin">
		<property name="release" value="${build.dir}/release_${build.number}" />
		<echo message="Release BIN: ${build.number}" />
		<mkdir dir="${release}" />
		<copy file="${build.dir}/jwbf-${build.number}.jar" todir="${release}/bin" />
		<copy todir="${release}/lib">
			<fileset dir="${lib.dir}" includes="**/*" excludes="junit*, taglet*" />
		</copy>
		<copy todir="${release}">
			<fileset dir="buildAdds" includes="*" />
		</copy>
		<tar tarfile="${release}/jwbf-${build.number}-bin.tar.gz" excludes="*.tar.gz" basedir="${release}" compression="gzip" />
		<delete includeemptydirs="true">
			<fileset dir="${release}" includes="*/**" excludes="*.tar.gz, junit" />
		</delete>
	</target>

	<target name="releaseSimpleJar">
		<property name="release" value="${build.dir}/release_${build.number}" />
		<echo message="Release BIN SIMPLE: ${build.number}" />
		<mkdir dir="${release}" />
		<copy file="${build.dir}/jwbf-${build.number}.jar" todir="${release}/bin" />
		<copy todir="${release}">
			<fileset dir="buildAdds" includes="*" />
		</copy>
		<tar tarfile="${release}/jwbf-${build.number}-binSimple.tar.gz" excludes="*.tar.gz" basedir="${release}" compression="gzip" />
		<delete includeemptydirs="true">
			<fileset dir="${release}" includes="*/**" excludes="*.tar.gz, junit" />
		</delete>
	</target>

	<target name="clean">
		<delete failonerror="false" dir="${build.dir}" />
	</target>
</project>
